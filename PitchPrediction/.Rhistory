data <- data[, !names(data) %in% "type_confidence"]
#pitcher$uniqueID <- paste(pitcher$num, pitcher$gameday_link, pitcher$inning, sep='')
# convert handedness boolean (0|1)
data$pitch_rl[data$pitch_rl == 'L'] <- 0
data$pitch_rl[data$pitch_rl == 'R'] <- 1
data$bat_rl[data$bat_rl == 'L'] <- 0
data$bat_rl[data$bat_rl == 'R'] <- 1
#splot balls / strike counts into two columns
data <- separate(data = data, col = count, into = c("balls", "strikes"), sep = "\\-")
# convert on_bases IDs to boolean (0|1)
data$on_1b <- replace(data$on_1b, is.na(data$on_1b), 0)
data$on_1b <- replace(data$on_1b, data$on_1b != 0, 1)
data$on_2b <- replace(data$on_2b, is.na(data$on_2b), 0)
data$on_2b <- replace(data$on_2b, data$on_2b != 0, 1)
data$on_3b <- replace(data$on_3b, is.na(data$on_3b), 0)
data$on_3b <- replace(data$on_3b, data$on_3b != 0, 1)
# retrieve previous pitch ball type
prev_pitch_type <- lag(data$pitch_type, 1)
data$prev_pitch_type <- prev_pitch_type
data[data$balls == 0 & data$strikes == 0, ]$prev_pitch_type <- NA
write.csv(data, file="output.csv")
head(data)
# ----------------FEATURES----------------------
# Pitch Type: [pitch_type(char)]
# Previous Pitch: [prev_pitch_type(char)]
# Player Stats: [batter_num(#), pitch_rl(char), batter_rl(char)]
# Game: [Innings(#), balls(#), strikes(#), on_1b(#), on_2b(#), on_3b(#), score_differencial(#)]
# Data: [pitch_type, prev_pitch_type, batter_num, pitch_rl, bat_rl, inning, balls, strikes, on_1b, on_2b, on_3b, score_diff
#Load required packages
library('DBI')
library('dplyr')
library('ggplot2')
library('pitchRx')
library('sqldf')
db <- src_sqlite("pitchRx_test.sqlite3", create = TRUE)
#Set up a scrape that will write to the new db
scrape(start = "2016-01-01", end = Sys.Date() - 1, connect = db$con)
#scrape(start = "2016-06-01", end = '2016-06-30', connect = db$con)
#Download additional data and join
files <- c("inning/inning_hit.xml", "miniscoreboard.xml", "players.xml")
scrape(start = "2016-01-01", end = Sys.Date() - 1, suffix = files, connect = db$con)
update_db(src_sqlite, end = Sys.Date() - 1)
library(RSQLite)
library(dplyr)
library(msm)
library(xtable)
library(data.table)
library(tidyr)
db <- src_sqlite('pitchRx_june.sqlite3')
#db_1 <- src_sqlite('pitchRx_1.sqlite3')
#dbGetQuery(db$con, 'SELECT * from atbat') #WHERE pitcher_name == "Clayton Kershaw"')
#dbGetQuery(db_1$con, 'SELECT * from atbat WHERE pitcher_name == "Clayton Kershaw"')
#head(dbGetQuery(db$con, 'Select * from atbat'))
target_pitcher <- "Clayton Kershaw"
# Join the location and names table into a new que table.
pitch <- dbGetQuery(db$con, 'SELECT pitch_type, inning, count, on_1b, on_2b, on_3b, type_confidence,
num, gameday_link FROM pitch')
#dbListTables(db$con)
#dbListFields(db$con, "atbat")
#dbListFields(db$con, "pitch")
#dbListFields(db$con, "player")
#dbListFields(db$con, "game")
names <- dbGetQuery(db$con, 'SELECT pitcher AS pitcher_id, pitcher_name, batter AS batter_id,
batter_name, score, num, b_height, gameday_link, home_team_runs, away_team_runs, o AS out FROM atbat') #stand?
#n <- as.data.frame(collect(names))
#n$pitcher_name[n$pitcher_name == "Randal Grichuk"]
#names[names$pitcher_name == target_pitcher]
games <- dbGetQuery(db$con, 'SELECT gameday_link, home_team_id FROM game')
games$gameday_link <- paste('gid_',games$gameday_link, sep="")
pitcher_stats <- dbGetQuery(db$con, 'SELECT id as pitcher_id, rl AS pitch_rl, team_id as pitcher_team_id FROM player')
#era AS pitcher_era
batter_stats <- dbGetQuery(db$con, 'SELECT id as batter_id, bats as bat_rl FROM player')
#                          rbi AS batter_rbi,
#                           avg as batter_avg,
#                           )
que <- inner_join(pitch, filter(names, pitcher_name == target_pitcher),
by = c('num', 'gameday_link'))
que <- inner_join(que, games, by = c('gameday_link'))
que <- inner_join(que, pitcher_stats, by = c('pitcher_id'))
que <- inner_join(que, batter_stats, by = c('batter_id'))
pitchfx <- as.data.frame(collect(que))
pitchfx <- data.table(pitchfx[ do.call(order, pitchfx[ , c('gameday_link','inning', 'num') ] ), ])
pitchfx[, batter_num:=as.numeric(factor(num)), by=gameday_link]
pitchfx <- as.data.frame(pitchfx)
# Create pitcher_at_home field
pitchfx$pitcher_at_home[pitchfx$home_team_id == pitchfx$pitcher_team_id] <- 1
pitchfx$pitcher_at_home[pitchfx$home_team_id != pitchfx$pitcher_team_id] <- -1
# Create a new field for the batting order number.
pitchfx$batter_num <- ifelse(pitchfx$batter_num %% 9 == 0, 9, (pitchfx$batter_num %% 9))
pitchfx$batter_num <- as.factor(pitchfx$batter_num)
pitchfx$pitch_type <- as.factor(pitchfx$pitch_type)
# Get # of outs
pitchfx$out <- pitchfx$out - 1
pitchfx$out[pitchfx$out == -1] <- 0
# Select most frequent pitch types
pitch_labels <- levels(pitchfx$pitch_type)
pitch_type_props <- rep(0,length(pitch_labels))
i=1
for (PT in pitch_labels) {
pitch_type_props[i] = length(pitchfx$pitch_type[pitchfx$pitch_type==PT]) / length(pitchfx$pitch_type)
i = i+1;
}
pitch_type_props <- melt(data.frame(pitch_labels, pitch_type_props))
pitch_type_props <- pitch_type_props[order(-pitch_type_props$value),]
#print(pitch_type_props)
# Drop levels that are not useful (Under proportions of 0.05)
used_pitch_types <- pitch_type_props$pitch_labels[pitch_type_props$value > 0.05]
pitchfx <- pitchfx[pitchfx$pitch_type == used_pitch_types,]
# compute score difference
pitchfx$score_diff <- (as.numeric(pitchfx$home_team_runs) - as.numeric(pitchfx$away_team_runs)) * pitchfx$pitcher_at_home
# Cleaning up data df.
data <- as.data.frame(select(pitchfx, type_confidence, pitch_type, batter_num, pitch_rl, bat_rl, inning,
count, out, on_1b, on_2b, on_3b, score_diff))
# Only use instances where type confidence is at least 0.90
data <- data[data$type_confidence > 0.90,]
data <- data[, !names(data) %in% "type_confidence"]
#pitcher$uniqueID <- paste(pitcher$num, pitcher$gameday_link, pitcher$inning, sep='')
# convert handedness boolean (0|1)
data$pitch_rl[data$pitch_rl == 'L'] <- 0
data$pitch_rl[data$pitch_rl == 'R'] <- 1
data$bat_rl[data$bat_rl == 'L'] <- 0
data$bat_rl[data$bat_rl == 'R'] <- 1
#splot balls / strike counts into two columns
data <- separate(data = data, col = count, into = c("balls", "strikes"), sep = "\\-")
# convert on_bases IDs to boolean (0|1)
data$on_1b <- replace(data$on_1b, is.na(data$on_1b), 0)
data$on_1b <- replace(data$on_1b, data$on_1b != 0, 1)
data$on_2b <- replace(data$on_2b, is.na(data$on_2b), 0)
data$on_2b <- replace(data$on_2b, data$on_2b != 0, 1)
data$on_3b <- replace(data$on_3b, is.na(data$on_3b), 0)
data$on_3b <- replace(data$on_3b, data$on_3b != 0, 1)
# retrieve previous pitch ball type
prev_pitch_type <- lag(data$pitch_type, 1)
data$prev_pitch_type <- prev_pitch_type
data[data$balls == 0 & data$strikes == 0, ]$prev_pitch_type <- NA
write.csv(data, file="output.csv")
head(data)
# ----------------FEATURES----------------------
# Pitch Type: [pitch_type(char)]
# Previous Pitch: [prev_pitch_type(char)]
# Player Stats: [batter_num(#), pitch_rl(char), batter_rl(char)]
# Game: [Innings(#), balls(#), strikes(#), on_1b(#), on_2b(#), on_3b(#), score_differencial(#)]
# Data: [pitch_type, prev_pitch_type, batter_num, pitch_rl, bat_rl, inning, balls, strikes, on_1b, on_2b, on_3b, score_diff
library(RSQLite)
library(dplyr)
library(msm)
library(xtable)
library(data.table)
library(tidyr)
db <- src_sqlite('pitchRx_db.sqlite3')
#db_1 <- src_sqlite('pitchRx_1.sqlite3')
#dbGetQuery(db$con, 'SELECT * from atbat') #WHERE pitcher_name == "Clayton Kershaw"')
#dbGetQuery(db_1$con, 'SELECT * from atbat WHERE pitcher_name == "Clayton Kershaw"')
#head(dbGetQuery(db$con, 'Select * from atbat'))
target_pitcher <- "Clayton Kershaw"
# Join the location and names table into a new que table.
pitch <- dbGetQuery(db$con, 'SELECT pitch_type, inning, count, on_1b, on_2b, on_3b, type_confidence,
num, gameday_link FROM pitch')
#dbListTables(db$con)
#dbListFields(db$con, "atbat")
#dbListFields(db$con, "pitch")
#dbListFields(db$con, "player")
#dbListFields(db$con, "game")
names <- dbGetQuery(db$con, 'SELECT pitcher AS pitcher_id, pitcher_name, batter AS batter_id,
batter_name, score, num, b_height, gameday_link, home_team_runs, away_team_runs, o AS out FROM atbat') #stand?
#n <- as.data.frame(collect(names))
#n$pitcher_name[n$pitcher_name == "Randal Grichuk"]
#names[names$pitcher_name == target_pitcher]
games <- dbGetQuery(db$con, 'SELECT gameday_link, home_team_id FROM game')
games$gameday_link <- paste('gid_',games$gameday_link, sep="")
pitcher_stats <- dbGetQuery(db$con, 'SELECT id as pitcher_id, rl AS pitch_rl, team_id as pitcher_team_id FROM player')
#era AS pitcher_era
batter_stats <- dbGetQuery(db$con, 'SELECT id as batter_id, bats as bat_rl FROM player')
#                          rbi AS batter_rbi,
#                           avg as batter_avg,
#                           )
que <- inner_join(pitch, filter(names, pitcher_name == target_pitcher),
by = c('num', 'gameday_link'))
que <- inner_join(que, games, by = c('gameday_link'))
que <- inner_join(que, pitcher_stats, by = c('pitcher_id'))
que <- inner_join(que, batter_stats, by = c('batter_id'))
pitchfx <- as.data.frame(collect(que))
pitchfx <- data.table(pitchfx[ do.call(order, pitchfx[ , c('gameday_link','inning', 'num') ] ), ])
pitchfx[, batter_num:=as.numeric(factor(num)), by=gameday_link]
pitchfx <- as.data.frame(pitchfx)
# Create pitcher_at_home field
pitchfx$pitcher_at_home[pitchfx$home_team_id == pitchfx$pitcher_team_id] <- 1
pitchfx$pitcher_at_home[pitchfx$home_team_id != pitchfx$pitcher_team_id] <- -1
# Create a new field for the batting order number.
pitchfx$batter_num <- ifelse(pitchfx$batter_num %% 9 == 0, 9, (pitchfx$batter_num %% 9))
pitchfx$batter_num <- as.factor(pitchfx$batter_num)
pitchfx$pitch_type <- as.factor(pitchfx$pitch_type)
# Get # of outs
pitchfx$out <- pitchfx$out - 1
pitchfx$out[pitchfx$out == -1] <- 0
# Select most frequent pitch types
pitch_labels <- levels(pitchfx$pitch_type)
pitch_type_props <- rep(0,length(pitch_labels))
i=1
for (PT in pitch_labels) {
pitch_type_props[i] = length(pitchfx$pitch_type[pitchfx$pitch_type==PT]) / length(pitchfx$pitch_type)
i = i+1;
}
pitch_type_props <- melt(data.frame(pitch_labels, pitch_type_props))
pitch_type_props <- pitch_type_props[order(-pitch_type_props$value),]
#print(pitch_type_props)
# Drop levels that are not useful (Under proportions of 0.05)
used_pitch_types <- pitch_type_props$pitch_labels[pitch_type_props$value > 0.05]
pitchfx <- pitchfx[pitchfx$pitch_type == used_pitch_types,]
# compute score difference
pitchfx$score_diff <- (as.numeric(pitchfx$home_team_runs) - as.numeric(pitchfx$away_team_runs)) * pitchfx$pitcher_at_home
# Cleaning up data df.
data <- as.data.frame(select(pitchfx, type_confidence, pitch_type, batter_num, pitch_rl, bat_rl, inning,
count, out, on_1b, on_2b, on_3b, score_diff))
# Only use instances where type confidence is at least 0.90
data <- data[data$type_confidence > 0.90,]
data <- data[, !names(data) %in% "type_confidence"]
#pitcher$uniqueID <- paste(pitcher$num, pitcher$gameday_link, pitcher$inning, sep='')
# convert handedness boolean (0|1)
data$pitch_rl[data$pitch_rl == 'L'] <- 0
data$pitch_rl[data$pitch_rl == 'R'] <- 1
data$bat_rl[data$bat_rl == 'L'] <- 0
data$bat_rl[data$bat_rl == 'R'] <- 1
#splot balls / strike counts into two columns
data <- separate(data = data, col = count, into = c("balls", "strikes"), sep = "\\-")
# convert on_bases IDs to boolean (0|1)
data$on_1b <- replace(data$on_1b, is.na(data$on_1b), 0)
data$on_1b <- replace(data$on_1b, data$on_1b != 0, 1)
data$on_2b <- replace(data$on_2b, is.na(data$on_2b), 0)
data$on_2b <- replace(data$on_2b, data$on_2b != 0, 1)
data$on_3b <- replace(data$on_3b, is.na(data$on_3b), 0)
data$on_3b <- replace(data$on_3b, data$on_3b != 0, 1)
# retrieve previous pitch ball type
prev_pitch_type <- lag(data$pitch_type, 1)
data$prev_pitch_type <- prev_pitch_type
data[data$balls == 0 & data$strikes == 0, ]$prev_pitch_type <- NA
write.csv(data, file="output.csv")
head(data)
# ----------------FEATURES----------------------
# Pitch Type: [pitch_type(char)]
# Previous Pitch: [prev_pitch_type(char)]
# Player Stats: [batter_num(#), pitch_rl(char), batter_rl(char)]
# Game: [Innings(#), balls(#), strikes(#), on_1b(#), on_2b(#), on_3b(#), score_differencial(#)]
# Data: [pitch_type, prev_pitch_type, batter_num, pitch_rl, bat_rl, inning, balls, strikes, on_1b, on_2b, on_3b, score_diff
library(RSQLite)
library(dplyr)
library(msm)
library(xtable)
library(data.table)
library(tidyr)
db <- src_sqlite('pitchRx_test.sqlite3')
#db_1 <- src_sqlite('pitchRx_1.sqlite3')
#dbGetQuery(db$con, 'SELECT * from atbat') #WHERE pitcher_name == "Clayton Kershaw"')
#dbGetQuery(db_1$con, 'SELECT * from atbat WHERE pitcher_name == "Clayton Kershaw"')
#head(dbGetQuery(db$con, 'Select * from atbat'))
target_pitcher <- "Clayton Kershaw"
# Join the location and names table into a new que table.
pitch <- dbGetQuery(db$con, 'SELECT pitch_type, inning, count, on_1b, on_2b, on_3b, type_confidence,
num, gameday_link FROM pitch')
#dbListTables(db$con)
#dbListFields(db$con, "atbat")
#dbListFields(db$con, "pitch")
#dbListFields(db$con, "player")
#dbListFields(db$con, "game")
names <- dbGetQuery(db$con, 'SELECT pitcher AS pitcher_id, pitcher_name, batter AS batter_id,
batter_name, score, num, b_height, gameday_link, home_team_runs, away_team_runs, o AS out FROM atbat') #stand?
#n <- as.data.frame(collect(names))
#n$pitcher_name[n$pitcher_name == "Randal Grichuk"]
#names[names$pitcher_name == target_pitcher]
games <- dbGetQuery(db$con, 'SELECT gameday_link, home_team_id FROM game')
games$gameday_link <- paste('gid_',games$gameday_link, sep="")
pitcher_stats <- dbGetQuery(db$con, 'SELECT id as pitcher_id, rl AS pitch_rl, team_id as pitcher_team_id FROM player')
#era AS pitcher_era
batter_stats <- dbGetQuery(db$con, 'SELECT id as batter_id, bats as bat_rl FROM player')
#                          rbi AS batter_rbi,
#                           avg as batter_avg,
#                           )
que <- inner_join(pitch, filter(names, pitcher_name == target_pitcher),
by = c('num', 'gameday_link'))
que <- inner_join(que, games, by = c('gameday_link'))
que <- inner_join(que, pitcher_stats, by = c('pitcher_id'))
que <- inner_join(que, batter_stats, by = c('batter_id'))
pitchfx <- as.data.frame(collect(que))
pitchfx <- data.table(pitchfx[ do.call(order, pitchfx[ , c('gameday_link','inning', 'num') ] ), ])
pitchfx[, batter_num:=as.numeric(factor(num)), by=gameday_link]
pitchfx <- as.data.frame(pitchfx)
# Create pitcher_at_home field
pitchfx$pitcher_at_home[pitchfx$home_team_id == pitchfx$pitcher_team_id] <- 1
pitchfx$pitcher_at_home[pitchfx$home_team_id != pitchfx$pitcher_team_id] <- -1
# Create a new field for the batting order number.
pitchfx$batter_num <- ifelse(pitchfx$batter_num %% 9 == 0, 9, (pitchfx$batter_num %% 9))
pitchfx$batter_num <- as.factor(pitchfx$batter_num)
pitchfx$pitch_type <- as.factor(pitchfx$pitch_type)
# Get # of outs
pitchfx$out <- pitchfx$out - 1
pitchfx$out[pitchfx$out == -1] <- 0
# Select most frequent pitch types
pitch_labels <- levels(pitchfx$pitch_type)
pitch_type_props <- rep(0,length(pitch_labels))
i=1
for (PT in pitch_labels) {
pitch_type_props[i] = length(pitchfx$pitch_type[pitchfx$pitch_type==PT]) / length(pitchfx$pitch_type)
i = i+1;
}
pitch_type_props <- melt(data.frame(pitch_labels, pitch_type_props))
pitch_type_props <- pitch_type_props[order(-pitch_type_props$value),]
#print(pitch_type_props)
# Drop levels that are not useful (Under proportions of 0.05)
used_pitch_types <- pitch_type_props$pitch_labels[pitch_type_props$value > 0.05]
pitchfx <- pitchfx[pitchfx$pitch_type == used_pitch_types,]
# compute score difference
pitchfx$score_diff <- (as.numeric(pitchfx$home_team_runs) - as.numeric(pitchfx$away_team_runs)) * pitchfx$pitcher_at_home
# Cleaning up data df.
data <- as.data.frame(select(pitchfx, type_confidence, pitch_type, batter_num, pitch_rl, bat_rl, inning,
count, out, on_1b, on_2b, on_3b, score_diff))
# Only use instances where type confidence is at least 0.90
data <- data[data$type_confidence > 0.90,]
data <- data[, !names(data) %in% "type_confidence"]
#pitcher$uniqueID <- paste(pitcher$num, pitcher$gameday_link, pitcher$inning, sep='')
# convert handedness boolean (0|1)
data$pitch_rl[data$pitch_rl == 'L'] <- 0
data$pitch_rl[data$pitch_rl == 'R'] <- 1
data$bat_rl[data$bat_rl == 'L'] <- 0
data$bat_rl[data$bat_rl == 'R'] <- 1
#splot balls / strike counts into two columns
data <- separate(data = data, col = count, into = c("balls", "strikes"), sep = "\\-")
# convert on_bases IDs to boolean (0|1)
data$on_1b <- replace(data$on_1b, is.na(data$on_1b), 0)
data$on_1b <- replace(data$on_1b, data$on_1b != 0, 1)
data$on_2b <- replace(data$on_2b, is.na(data$on_2b), 0)
data$on_2b <- replace(data$on_2b, data$on_2b != 0, 1)
data$on_3b <- replace(data$on_3b, is.na(data$on_3b), 0)
data$on_3b <- replace(data$on_3b, data$on_3b != 0, 1)
# retrieve previous pitch ball type
prev_pitch_type <- lag(data$pitch_type, 1)
data$prev_pitch_type <- prev_pitch_type
data[data$balls == 0 & data$strikes == 0, ]$prev_pitch_type <- NA
write.csv(data, file="output.csv")
head(data)
# ----------------FEATURES----------------------
# Pitch Type: [pitch_type(char)]
# Previous Pitch: [prev_pitch_type(char)]
# Player Stats: [batter_num(#), pitch_rl(char), batter_rl(char)]
# Game: [Innings(#), balls(#), strikes(#), on_1b(#), on_2b(#), on_3b(#), score_differencial(#)]
# Data: [pitch_type, prev_pitch_type, batter_num, pitch_rl, bat_rl, inning, balls, strikes, on_1b, on_2b, on_3b, score_diff
library(RSQLite)
library(dplyr)
library(msm)
library(xtable)
library(data.table)
library(tidyr)
db <- src_sqlite('pitchRx_test.sqlite3')
#db_1 <- src_sqlite('pitchRx_1.sqlite3')
#dbGetQuery(db$con, 'SELECT * from atbat') #WHERE pitcher_name == "Clayton Kershaw"')
#dbGetQuery(db_1$con, 'SELECT * from atbat WHERE pitcher_name == "Clayton Kershaw"')
#head(dbGetQuery(db$con, 'Select * from atbat'))
target_pitcher <- "Clayton Kershaw"
# Join the location and names table into a new que table.
pitch <- dbGetQuery(db$con, 'SELECT pitch_type, inning, count, on_1b, on_2b, on_3b, type_confidence,
num, gameday_link FROM pitch')
#dbListTables(db$con)
#dbListFields(db$con, "atbat")
#dbListFields(db$con, "pitch")
#dbListFields(db$con, "player")
#dbListFields(db$con, "game")
names <- dbGetQuery(db$con, 'SELECT pitcher AS pitcher_id, pitcher_name, batter AS batter_id,
batter_name, score, num, b_height, gameday_link, home_team_runs, away_team_runs, o AS out FROM atbat') #stand?
#n <- as.data.frame(collect(names))
#n$pitcher_name[n$pitcher_name == "Randal Grichuk"]
#names[names$pitcher_name == target_pitcher]
games <- dbGetQuery(db$con, 'SELECT gameday_link, home_team_id FROM game')
games$gameday_link <- paste('gid_',games$gameday_link, sep="")
pitcher_stats <- dbGetQuery(db$con, 'SELECT id as pitcher_id, rl AS pitch_rl, team_id as pitcher_team_id FROM player')
#era AS pitcher_era
batter_stats <- dbGetQuery(db$con, 'SELECT id as batter_id, bats as bat_rl FROM player')
#                          rbi AS batter_rbi,
#                           avg as batter_avg,
#                           )
que <- inner_join(pitch, filter(names, pitcher_name == target_pitcher),
by = c('num', 'gameday_link'))
que <- inner_join(que, games, by = c('gameday_link'))
que <- inner_join(que, pitcher_stats, by = c('pitcher_id'))
que <- inner_join(que, batter_stats, by = c('batter_id'))
pitchfx <- as.data.frame(collect(que))
pitchfx <- data.table(pitchfx[ do.call(order, pitchfx[ , c('gameday_link','inning', 'num') ] ), ])
pitchfx[, batter_num:=as.numeric(factor(num)), by=gameday_link]
pitchfx <- as.data.frame(pitchfx)
# Create pitcher_at_home field
pitchfx$pitcher_at_home[pitchfx$home_team_id == pitchfx$pitcher_team_id] <- 1
pitchfx$pitcher_at_home[pitchfx$home_team_id != pitchfx$pitcher_team_id] <- -1
# Create a new field for the batting order number.
pitchfx$batter_num <- ifelse(pitchfx$batter_num %% 9 == 0, 9, (pitchfx$batter_num %% 9))
pitchfx$batter_num <- as.factor(pitchfx$batter_num)
pitchfx$pitch_type <- as.factor(pitchfx$pitch_type)
# Get # of outs
pitchfx$out <- pitchfx$out - 1
pitchfx$out[pitchfx$out == -1] <- 0
# Select most frequent pitch types
pitch_labels <- levels(pitchfx$pitch_type)
pitch_type_props <- rep(0,length(pitch_labels))
i=1
for (PT in pitch_labels) {
pitch_type_props[i] = length(pitchfx$pitch_type[pitchfx$pitch_type==PT]) / length(pitchfx$pitch_type)
i = i+1;
}
pitch_type_props <- melt(data.frame(pitch_labels, pitch_type_props))
pitch_type_props <- pitch_type_props[order(-pitch_type_props$value),]
#print(pitch_type_props)
# Drop levels that are not useful (Under proportions of 0.05)
used_pitch_types <- pitch_type_props$pitch_labels[pitch_type_props$value > 0.05]
pitchfx <- pitchfx[pitchfx$pitch_type == used_pitch_types,]
# compute score difference
pitchfx$score_diff <- (as.numeric(pitchfx$home_team_runs) - as.numeric(pitchfx$away_team_runs)) * pitchfx$pitcher_at_home
# Cleaning up data df.
data <- as.data.frame(select(pitchfx, type_confidence, pitch_type, batter_num, pitch_rl, bat_rl, inning,
count, out, on_1b, on_2b, on_3b, score_diff))
# Only use instances where type confidence is at least 0.90
data <- data[data$type_confidence > 0.90,]
data <- data[, !names(data) %in% "type_confidence"]
#pitcher$uniqueID <- paste(pitcher$num, pitcher$gameday_link, pitcher$inning, sep='')
# convert handedness boolean (0|1)
data$pitch_rl[data$pitch_rl == 'L'] <- 0
data$pitch_rl[data$pitch_rl == 'R'] <- 1
data$bat_rl[data$bat_rl == 'L'] <- 0
data$bat_rl[data$bat_rl == 'R'] <- 1
#splot balls / strike counts into two columns
data <- separate(data = data, col = count, into = c("balls", "strikes"), sep = "\\-")
# convert on_bases IDs to boolean (0|1)
data$on_1b <- replace(data$on_1b, is.na(data$on_1b), 0)
data$on_1b <- replace(data$on_1b, data$on_1b != 0, 1)
data$on_2b <- replace(data$on_2b, is.na(data$on_2b), 0)
data$on_2b <- replace(data$on_2b, data$on_2b != 0, 1)
data$on_3b <- replace(data$on_3b, is.na(data$on_3b), 0)
data$on_3b <- replace(data$on_3b, data$on_3b != 0, 1)
# retrieve previous pitch ball type
prev_pitch_type <- lag(data$pitch_type, 1)
data$prev_pitch_type <- prev_pitch_type
data[data$balls == 0 & data$strikes == 0, ]$prev_pitch_type <- NA
write.csv(data, file="output.csv")
head(data)
# ----------------FEATURES----------------------
# Pitch Type: [pitch_type(char)]
# Previous Pitch: [prev_pitch_type(char)]
# Player Stats: [batter_num(#), pitch_rl(char), batter_rl(char)]
# Game: [Innings(#), balls(#), strikes(#), on_1b(#), on_2b(#), on_3b(#), score_differencial(#)]
# Data: [pitch_type, prev_pitch_type, batter_num, pitch_rl, bat_rl, inning, balls, strikes, on_1b, on_2b, on_3b, score_diff
#Load required packages
library('DBI')
library('dplyr')
library('ggplot2')
library('pitchRx')
library('RSQLite')
db <- src_sqlite('pitchRx_test.sqlite3')
con = dbConnect(RSQLite::SQLite(), 'pitchRx_Kershaw.sqlite3')
dbListTables(con)
atbat <- filter(tbl(db, 'atbat'), date >= '2013-01-01' & date <= '2016-12-09' )
target_pitcher <- "Clayton Kershaw"
#Create list for player
Kershaw <- filter(atbat, pitcher_name == target_pitcher)
#Join atbat and pitch tables
pitches <- tbl(db, 'pitch') #tbl_sqlite
Kershaw_pitch <- inner_join(pitches, Kershaw, by = c('num', 'gameday_link')) #tbl_sqlite
#Collect Data
Clayton_Kershaw16 <- collect(Kershaw_pitch)
#See Summary
summary(Clayton_Kershaw16)
library('DBI')
library('dplyr')
library('ggplot2')
library('pitchRx')
library('RSQLite')
db <- src_sqlite('pitchRx_test.sqlite3')
con = dbConnect(RSQLite::SQLite(), 'pitchRx_Kershaw.sqlite3')
dbListTables(con)
db <- src_sqlite('pitchRx_test.sqlite3')
con = dbConnect(RSQLite::SQLite(), 'pitchRx_Kershaw.sqlite3')
dbListTables(con)
db <- src_sqlite('pitchRx_test.sqlite3')
con = dbConnect(RSQLite::SQLite(), 'pitchRx_Kershaw.sqlite3')
dbListTables(con)
dbListTables(db)
dbListTables(db$con)
dbListTables(con)
library('DBI')
library('dplyr')
library('ggplot2')
library('pitchRx')
library('RSQLite')
db <- src_sqlite('pitchRx_test.sqlite3')
con = dbConnect(RSQLite::SQLite(), 'pitchRx_Kershaw.sqlite3')
atbat <- filter(tbl(db, 'atbat'), date >= '2013-01-01' & date <= '2016-12-09' )
library('DBI')
library('dplyr')
library('ggplot2')
library('pitchRx')
library('RSQLite')
db <- src_sqlite('pitchRx_test.sqlite3')
db
db$con
db
db$con
dbListTables(db)
dbListTables(db$con)
dbListTables(db$con)
db <- src_sqlite("pitchRx_615.sqlite3", create = TRUE)
scrape(start = "2016-06-15", end = "2016-06-15", connect = db$con)
db
files <- c("inning/inning_hit.xml", "miniscoreboard.xml", "players.xml")
scrape(start = "2016-06-15", end = "2016-06-15", suffix = files, connect = db$con)
dbListTables(db$con)
db$con
db
